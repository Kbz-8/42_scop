[nzsl_version("1.0")]
module;

struct VertIn
{
	[location(0)] pos: vec4[f32],
	[location(1)] color: vec4[f32],
	[location(2)] normal: vec4[f32],
	[location(3)] uv: vec2[f32]
}

struct VertOut
{
	[location(0)] color : vec4[f32],
	[location(1)] uv : vec2[f32],
	[location(2)] norm : vec4[f32],
	[location(3)] norm_mat : mat4[f32],
	[builtin(position)] pos: vec4[f32]
}

struct ModelData
{
	matrix : mat4[f32],
	normal: mat4[f32],
}

[layout(std140)]
struct Camera
{
	view: mat4[f32],
	projection: mat4[f32]
}

external
{
	[set(0), binding(0)] camera: uniform[Camera],
	model : push_constant[ModelData]
}

[entry(vert)]
fn main(input: VertIn) -> VertOut
{
	let output: VertOut;
	output.color = input.color;
	output.uv = input.uv;
	output.norm = input.normal;
	output.norm_mat = model.normal;
	output.pos = camera.projection * camera.view * model.matrix * vec4[f32](input.pos.xyz, 1.0);
	return output;
}
